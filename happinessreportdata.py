# -*- coding: utf-8 -*-
"""HappinessReportData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oRsMyVE7hn2S4JrUhqZ5bdSeLT81ldH-
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import plotly.express as px
import numpy as np
from textblob import TextBlob

from happinessexceptionhandling import DataNotFoundException

class HappinessData():

  def __init__(self,happinessdata):
    self.happinessdata = happinessdata

  def getColumnsOfHappinessData(self,happinessdata):
    if(happinessdata.empty):
      raise DataNotFoundException(self.message)
    return self.happinessdata.columns
  
  def getDataTypesOfHappinessData(self,happinessdata):
    if(happinessdata.empty):
      raise DataNotFoundException(self.message)
    return self.happinessdata.dtypes
  
  def renameColumns(self,happinessdata):
    if(happinessdata.empty):
      raise DataNotFoundException(self.message)
    self.happinessdata = self.happinessdata.rename(columns={'Country or region': 'Country', 
                                                  'Overall rank': 'Happiness_Rank',
                                                  'Score':'Happiness_Score',
                                                  'GDP per capita':'GDP_per_capita',
                                                  'Social support':'Social_support',
                                                  'Healthy life expectancy':'Healthy_life_expectancy',
                                                  'Freedom to make life choices':'Freedom',
                                                  'Perceptions of corruption':'Corruption'})
    return self.happinessdata
  
  def areNullValuesPresent(self,happinessdata):
    if(happinessdata.empty):
      raise DataNotFoundException(self.message)
    return happinessdata.isnull()

  def fillMissingValues(self,happinessdata):
    if(happinessdata.empty):
      raise DataNotFoundException(self.message)
    happinessdata[['Social_support','Corruption']] = happinessdata[['Social_support','Corruption']].fillna(value = 0)
    return happinessdata
  
  def dropDuplicatesIfAny(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    return happinessData.drop_duplicates()

class HappinessDataVisualization():
  def getHappinessScoreHist(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    happinessData['Happiness_Score'].plot.hist()

  def getGDPRange(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    happinessData['GDP_per_capita'].plot(kind='box')
  
  def getPlotfeatureByfeature(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    sns.pairplot(happinessData)

  def getHappinessReportCorr(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    happinessReportCorr = happinessData.corr()
    return happinessReportCorr
  
  def getHeatMapofCorr(self,happinessReportCorr):
    if(happinessReportCorr.empty):
      raise DataNotFoundException(self.message)
    sns.heatmap(happinessReportCorr)

  def getHappinessScorePivot(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    happinessScore_pt = happinessData.pivot_table(columns='Year',values='Happiness_Score')
    return happinessScore_pt
  
  def getHappinessScoreOverYears(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    sns.heatmap(happinessData)

  def getFinlandHappinessOverYears(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    happinessData = happinessData[happinessData['Country']=='Finland']
    return happinessData
  
  def getFinlandHappinessMap(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    plt.figure(figsize=[10,12])
    sns.barplot(x='Happiness_Score',y='Happiness_Rank',data= happinessData,hue='Year')

  def getTopTenHappyCountry2019(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    happinessReport2019 = happinessData[happinessData['Year']==2019]
    happinessReport2019_top10 = happinessReport2019.head(10).sort_values('Happiness_Score', ascending = True)
    return happinessReport2019_top10
  
  def topTenHappyCountryMap(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    fig = px.bar(data_frame=happinessData,x='Happiness_Score',y='Country',orientation='h')
    fig.show()

  def getLeastHappyCountry2019(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    happinessReport2019 = happinessData[happinessData['Year']==2019]
    happinessReport2019_least10 = happinessReport2019.tail(10).sort_values('Happiness_Score', ascending = True)
    return happinessReport2019_least10
  
  def leastTenHappyCountryMap(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    fig = px.bar(data_frame=happinessData,x='Happiness_Score',y='Country',orientation='h')
    fig.show()

  def happinessSentimentAnalysis(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    happinessData['Remarks'] = np.where(happinessData['Happiness_Score']>5,'Happy','Less Happy')
    happinessData.loc[happinessData.Happiness_Score < 3.2, "Remarks"] = "Very less happy"
    happinessData['Sentiment'] = happinessData['Remarks'].apply(lambda remark: np.round(TextBlob(remark).sentiment.polarity))
    return happinessData

  def plotHappinessSentimentAnalysis(self,happinessData):
    if(happinessData.empty):
      raise DataNotFoundException(self.message)
    data=happinessData[happinessData['Sentiment']==1]['Region'].value_counts().sort_index().plot.bar()
    data.set_title("Happy countries as per region")
    data.set_xlabel("Region")
    data.set_ylabel("Number of countries")