# -*- coding: utf-8 -*-
"""HappinessMachineLearningModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YxSGV67YHTpLeAU6OewoYk8DvYsHUMtt
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import seaborn as sns
import matplotlib as mpl
import matplotlib.pyplot as plt
import plotly.express as px
import patsy
import pandas as pd

from patsy import dmatrices, dmatrix
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report,confusion_matrix
from sklearn import svm
from sklearn.tree import export_graphviz
from six import StringIO  
from IPython.display import Image  
import pydotplus

dtree = DecisionTreeClassifier()

class HappinessML():

  def __init__(self,happinessdata):
    self.happinessdata = happinessdata
  
  def getReportsByYear(self,happinessdata,year):
    return happinessdata[happinessdata['Year']==year]

  def happinessClassificationML(self,happinessdata):

    y,x = dmatrices('round(Healthy_life_expectancy) ~ Happiness_Score+GDP_per_capita -1', data = happinessdata)
    x_train, x_test,y_train, y_test = train_test_split(x,y, test_size = 0.3)

    dtree.fit(x_train, y_train)
    predictions = dtree.predict(x_test)

    predictor = pd.DataFrame({'Actual':y_test.flatten(), 'Predicted':predictions.flatten()})

    plt.figure(figsize=(12,6))
    plt.plot(predictor['Actual'],label='Original')
    plt.plot(predictor['Predicted'],label='Predicted')
    plt.title("Actual vs Predicted value")
    plt.legend()
    plt.show()

  def printClassificationReport(self,actual,prediction):
    print(classification_report(actual,prediction))
  
  def happinessClassificationWithSVM(self,happinessdata):

    y,x = dmatrices('round(Healthy_life_expectancy) ~ Happiness_Score+GDP_per_capita -1', data = happinessdata)
    x_train, x_test,y_train, y_test = train_test_split(x,y, test_size = 0.3)

    clf = svm.SVC(kernel='linear')
    clf.fit(x_train, y_train)
    y_pred = clf.predict(x_test)
    return y_test,y_pred

  def happinessClassificationWithDotPlus(self,happinessdata):
    independent_variables = ['Happiness_Score','GDP_per_capita']

    dot_data = StringIO()
    export_graphviz(dtree, out_file=dot_data,  
                    filled=True, rounded=True,
                    special_characters=True,feature_names = independent_variables,class_names=['0','1'])
    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())